<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
  <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
  <title>Todo List</title>
  <style>
    .completed {
      text-decoration: line-through;
    }

    .animated {
      animation-duration: 0.5s;
      animation-fill-mode: both;
    }

    @media (max-width: 640px) {
      .container {
        max-width: 100%;
      }
    }
  </style>
</head>

<body>
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold text-center mb-8">TaskMaster </h1>
    <form id="todo-form" class="flex items-center">
      <input type="text" id="todo-input" placeholder="Enter a task" class="rounded-l-lg px-4 py-2 border-t mr-0 border-b border-l text-gray-800 border-gray-200 bg-white flex-grow">
      <button type="submit" class="px-4 rounded-r-lg bg-blue-500 text-white font-bold p-2 ml-2">Add Task</button>
    </form>
    <ul id="todo-list" class="list-disc pl-6 mt-8"></ul>
    <div id="filter-buttons" class="flex justify-center mt-4">
      <button id="all-tasks" class="bg-blue-500 text-white px-4 py-2 rounded-l">All</button>
      <button id="active-tasks" class="bg-gray-500 text-white px-4 py-2">Active</button>
      <button id="completed-tasks" class="bg-gray-500 text-white px-4 py-2 rounded-r">Completed</button>
    </div>
    <button id="clear-completed" class="mt-8 bg-red-500 text-white px-4 py-2 rounded-full animate__animated animate__pulse">Clear Completed</button>
    <div id="sort-buttons" class="flex justify-center mt-4">
      <button id="sort-asc" class="bg-gray-500 text-white px-4 py-2 rounded-l">Sort Ascending</button>
      <button id="sort-desc" class="bg-gray-500 text-white px-4 py-2 rounded-r">Sort Descending</button>
    </div>
    <button id="download-excel" class="mt-8 bg-green-500 text-white px-4 py-2 rounded-full">Download Tasks</button>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const todoForm = document.getElementById('todo-form');
      const todoInput = document.getElementById('todo-input');
      const todoList = document.getElementById('todo-list');
      const allTasksButton = document.getElementById('all-tasks');
      const activeTasksButton = document.getElementById('active-tasks');
      const completedTasksButton = document.getElementById('completed-tasks');
      const clearCompletedButton = document.getElementById('clear-completed');
      const sortAscButton = document.getElementById('sort-asc');
      const sortDescButton = document.getElementById('sort-desc');
      const downloadExcelButton = document.getElementById('download-excel');
      let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

      function renderTasks() {
        todoList.innerHTML = '';

        tasks.forEach((task, index) => {
          const listItem = document.createElement('li');
          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.checked = task.completed;
          checkbox.addEventListener('change', () => {
            toggleTaskCompletion(index);
          });

          const creationDate = moment(task.createdAt).format('MMM Do, YYYY');
          listItem.innerHTML = `
            <label class="flex items-center animate__animated animate__fadeInUp">
              <span class="text-lg font-semibold ${task.completed ? 'completed' : ''}">${task.name}</span>
              <span class="ml-2 text-gray-500 text-sm">${creationDate}</span>
              <button data-index="${index}" class="ml-4 text-red-500">Delete</button>
            </label>
          `;
          listItem.prepend(checkbox);
          listItem.classList.add('mb-2');
          todoList.appendChild(listItem);
        });

        updateLocalStorage();
      }

      function handleFormSubmit(event) {
        event.preventDefault();
        const taskName = todoInput.value.trim();

        if (taskName !== '') {
          tasks.push({ name: taskName, completed: false, createdAt: moment() });
          renderTasks();
          todoInput.value = '';
        }
      }

      function handleTaskDelete(event) {
        if (event.target.tagName === 'BUTTON') {
          const index = event.target.dataset.index;
          tasks.splice(index, 1);
          renderTasks();
        }
      }

      function toggleTaskCompletion(index) {
        tasks[index].completed = !tasks[index].completed;
        renderTasks();
      }

      function filterTasks(filterType) {
        let filteredTasks = [];

        switch (filterType) {
          case 'active':
            filteredTasks = tasks.filter(task => !task.completed);
            break;
          case 'completed':
            filteredTasks = tasks.filter(task => task.completed);
            break;
          default:
            filteredTasks = tasks;
            break;
        }

        renderTasks(filteredTasks);
      }

      function clearCompletedTasks() {
        tasks = tasks.filter(task => !task.completed);
        renderTasks();
      }

      function sortTasks(sortType) {
        switch (sortType) {
          case 'asc':
            tasks.sort((a, b) => a.createdAt - b.createdAt);
            break;
          case 'desc':
            tasks.sort((a, b) => b.createdAt - a.createdAt);
            break;
        }

        renderTasks();
      }

      function downloadTasks() {
        const worksheet = XLSX.utils.json_to_sheet(tasks);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Tasks');
        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
        saveAsExcelFile(excelBuffer, 'tasks');
      }

      function saveAsExcelFile(buffer, fileName) {
        const data = new Blob([buffer], { type: 'application/octet-stream' });
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(data);
        downloadLink.download = `${fileName}.xlsx`;
        downloadLink.click();
      }

      function updateLocalStorage() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
      }

      todoForm.addEventListener('submit', handleFormSubmit);
      todoList.addEventListener('click', handleTaskDelete);
      allTasksButton.addEventListener('click', () => filterTasks('all'));
      activeTasksButton.addEventListener('click', () => filterTasks('active'));
      completedTasksButton.addEventListener('click', () => filterTasks('completed'));
      clearCompletedButton.addEventListener('click', clearCompletedTasks);
      sortAscButton.addEventListener('click', () => sortTasks('asc'));
      sortDescButton.addEventListener('click', () => sortTasks('desc'));
      downloadExcelButton.addEventListener('click', downloadTasks);

      renderTasks();
    });
  </script>
</body>

</html>
